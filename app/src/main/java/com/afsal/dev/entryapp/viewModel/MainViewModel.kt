package com.afsal.dev.entryapp.viewModelimport android.util.Logimport androidx.lifecycle.LiveDataimport androidx.lifecycle.MutableLiveDataimport androidx.lifecycle.ViewModelimport androidx.lifecycle.viewModelScopeimport kotlinx.coroutines.launchclass MainViewModel:ViewModel() {    companion object{        const val RIGHT_LIST="RightList"        const val LEFT_LIST="LeftList"    }   private  val _leftList:MutableLiveData<MutableList<String>> =MutableLiveData()         val leftList:LiveData<MutableList<String>>  get() = _leftList   private   val rightHashSet=HashSet<String>()    private val  leftHashSet=HashSet<String>()    private  val _rightList:MutableLiveData<List<String>> =MutableLiveData()    val rightList:LiveData<List<String>>  get() = _rightList      // private val selectedLiveData = MutableLiveData<MutableList<Int>>()            // val _rightList=MutableLiveData<MutableList<String>> ()    fun addElementToList(element:String){            rightHashSet.add(element)         _rightList.value=rightHashSet.toMutableList()    }     fun removeFromRight(element: String){        rightHashSet.remove(element)        _rightList.value=rightHashSet.toMutableList()    }     fun removeFromLeft(element: String){        leftHashSet.remove(element)        _leftList.value=leftHashSet.toMutableList()    }    fun coppyToList(selectedList:List<String>,destination:String){         if (destination == LEFT_LIST){             leftHashSet.addAll(selectedList)             _leftList.value=leftHashSet.toMutableList()         }else if (destination== RIGHT_LIST){             rightHashSet.addAll(selectedList)              _rightList.value=rightHashSet.toMutableList()         }    }  fun moveToList(selectedList: List<String>,destination: String){            if (destination == RIGHT_LIST){                //add valuse to right and remove values from left                viewModelScope.launch {                    rightHashSet.addAll(selectedList)                    _rightList.postValue(leftHashSet.toMutableList())                             //  leftHashSet.removeAll(selectedList)                    selectedList.map {                        leftHashSet.remove(it)                    }                    _leftList.postValue(selectedList.toMutableList())                }            }else if (destination == LEFT_LIST){                viewModelScope.launch {                    leftHashSet.addAll(selectedList)                    _leftList.postValue(leftHashSet.toMutableList())                    selectedList.map {                        rightHashSet.remove(it)                    }                   _rightList.postValue(rightHashSet.toMutableList())                }            }  }    fun swapLists(){        val temp =HashSet<String>()              temp.addAll(rightHashSet)               rightHashSet.clear()               rightHashSet.addAll(leftHashSet)               leftHashSet.clear()               leftHashSet.addAll(temp)                   _leftList.value=leftHashSet.toMutableList()                    _rightList.value=rightHashSet.toMutableList()                  temp.clear()    }}